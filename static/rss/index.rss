<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Davis Ching</title><description>Thoughts, stories and ideas.</description><link>http://localhost:2373/</link><image><url>http://localhost:2373/favicon.png</url><title>Davis Ching</title><link>http://localhost:2373/</link></image><generator>Ghost 3.1</generator><lastBuildDate>Sat, 25 Apr 2020 09:40:10 GMT</lastBuildDate><atom:link href="http://localhost:2373/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>退伍七週複習計畫 一之 練手 Spring Boot 與 Vue.js 實現簡易人事管理系統</title><description>使用 Spring Boot 與 Vue.js 實現一個簡易的人事管理系統 (資料庫採用 MySQL)。</description><link>http://localhost:2373/review-hrm/</link><guid isPermaLink="false">5ea3fc552410164c084c86ff</guid><category>侬好，Java Dev</category><dc:creator>Davis · 景詩維 </dc:creator><pubDate>Sat, 25 Apr 2020 09:05:40 GMT</pubDate><media:content url="http://localhost:2373/content/images/2020/04/Snip20200425_2.png" medium="image"/><content:encoded>&lt;!--kg-card-begin: markdown--&gt;&lt;blockquote&gt;
&lt;img src="http://localhost:2373/content/images/2020/04/Snip20200425_2.png" alt="退伍七週複習計畫 一之 練手 Spring Boot 與 Vue.js 實現簡易人事管理系統"&gt;&lt;p&gt;四個月的役期到現在剩下七週時間，長時間在兵營裡，也逐漸遺忘了一些技術，因此在最後的這段時間，利用每週短暫放假的一天半，對一些技術進行複習。這裏將會使用 Spring Boot 與 Vue.js 實現一個簡易的人事管理系統 (資料庫採用 MySQL)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="springsecurity"&gt;壹 ｜Spring Security 安全架構&lt;/h2&gt;
&lt;p&gt;Spring Security 是一種針對企業系統訪問時的安全問題，進行安全管理的一種架構，主要可以控制如：密碼加密、表單安全管理、驗證、命名空間安全管理等操作。該項目將只會採用一些最基本的功能，對該項目進行一些安全保護。&lt;/p&gt;
&lt;p&gt;這個框架之所以能夠進行安全管理，主要是因為它大量的依賴了 Servlet 的過濾器 (Filter) 功能。也就是開發者封裝了大量針對安全管理的過濾器，方便我們對自己的項目安全管理方面能夠更快的完成處置。其中，安全管理主要包含以下兩個操作：認證與授權。&lt;/p&gt;
&lt;h3 id&gt;資料庫準備&lt;/h3&gt;
&lt;p&gt;首先登陸資料庫，並創建新的資料庫與表單：&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;create database hrm;
use hrm;
drop table if exists `user`;
create table `user` (
	id bigint(20) not null auto_increment primary key,
  username varchar(32) comment '帳號',
  password varchar(16) comment '密碼',
  nickname varchar(32) default '' comment '暱稱'
) engine=innodb default charset=utf8mb4;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;檢查表是否成功創建：&lt;/p&gt;
&lt;!--kg-card-end: markdown--&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2373/content/images/2020/04/Snip20200425_1.png" class="kg-image" alt="退伍七週複習計畫 一之 練手 Spring Boot 與 Vue.js 實現簡易人事管理系統"&gt;&lt;/figure&gt;&lt;!--kg-card-begin: markdown--&gt;&lt;h3 id="springsecurity"&gt;Spring Security 小練習&lt;/h3&gt;
&lt;p&gt;在此之前，先創建一個小項目，練習一下 Spring Security 的基本操作。首先，創建一個新的 maven 項目，採用 &lt;code&gt;maven-archetype-quickstart&lt;/code&gt; 並命名為 &lt;code&gt;SpringSecurityPractice&lt;/code&gt; 並修改其依賴 &lt;code&gt;pom.xml&lt;/code&gt;為以下內容：&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;

&amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
  xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt;
  &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

  &amp;lt;groupId&amp;gt;pers.dc&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;SpringSecurityPractice&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;

  &amp;lt;name&amp;gt;SpringSecurityPractice&amp;lt;/name&amp;gt;
  &amp;lt;!-- FIXME change it to the project's website --&amp;gt;
  &amp;lt;url&amp;gt;http://www.example.com&amp;lt;/url&amp;gt;

    &amp;lt;parent&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;2.2.6.RELEASE&amp;lt;/version&amp;gt;
    &amp;lt;/parent&amp;gt;

  &amp;lt;properties&amp;gt;
    &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;
    &amp;lt;maven.compiler.source&amp;gt;1.7&amp;lt;/maven.compiler.source&amp;gt;
    &amp;lt;maven.compiler.target&amp;gt;1.7&amp;lt;/maven.compiler.target&amp;gt;
  &amp;lt;/properties&amp;gt;

  &amp;lt;dependencies&amp;gt;
      &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
      &amp;lt;/dependency&amp;gt;
      &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt;
      &amp;lt;/dependency&amp;gt;
      &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt;
      &amp;lt;/dependency&amp;gt;
      &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;spring-boot-starter-data-jpa&amp;lt;/artifactId&amp;gt;
      &amp;lt;/dependency&amp;gt;
      &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;1.18.12&amp;lt;/version&amp;gt;
      &amp;lt;/dependency&amp;gt;
      &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;org.mariadb.jdbc&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;mariadb-java-client&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;2.6.0&amp;lt;/version&amp;gt;
      &amp;lt;/dependency&amp;gt;
      &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;4.11&amp;lt;/version&amp;gt;
      &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
    &amp;lt;/dependency&amp;gt;
  &amp;lt;/dependencies&amp;gt;

  &amp;lt;build&amp;gt;
    &amp;lt;pluginManagement&amp;gt;&amp;lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&amp;gt;
      &amp;lt;plugins&amp;gt;
          &amp;lt;plugin&amp;gt;
              &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
              &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt;
              &amp;lt;executions&amp;gt;
                  &amp;lt;execution&amp;gt;
                      &amp;lt;goals&amp;gt;
                          &amp;lt;goal&amp;gt;repackage&amp;lt;/goal&amp;gt;
                      &amp;lt;/goals&amp;gt;
                  &amp;lt;/execution&amp;gt;
              &amp;lt;/executions&amp;gt;
          &amp;lt;/plugin&amp;gt;
        &amp;lt;!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle --&amp;gt;
        &amp;lt;plugin&amp;gt;
          &amp;lt;artifactId&amp;gt;maven-clean-plugin&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;3.1.0&amp;lt;/version&amp;gt;
        &amp;lt;/plugin&amp;gt;
        &amp;lt;!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging --&amp;gt;
        &amp;lt;plugin&amp;gt;
          &amp;lt;artifactId&amp;gt;maven-resources-plugin&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;3.0.2&amp;lt;/version&amp;gt;
        &amp;lt;/plugin&amp;gt;
        &amp;lt;plugin&amp;gt;
          &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;3.8.0&amp;lt;/version&amp;gt;
        &amp;lt;/plugin&amp;gt;
        &amp;lt;plugin&amp;gt;
          &amp;lt;artifactId&amp;gt;maven-surefire-plugin&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;2.22.1&amp;lt;/version&amp;gt;
        &amp;lt;/plugin&amp;gt;
        &amp;lt;plugin&amp;gt;
          &amp;lt;artifactId&amp;gt;maven-jar-plugin&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;3.0.2&amp;lt;/version&amp;gt;
        &amp;lt;/plugin&amp;gt;
        &amp;lt;plugin&amp;gt;
          &amp;lt;artifactId&amp;gt;maven-install-plugin&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;2.5.2&amp;lt;/version&amp;gt;
        &amp;lt;/plugin&amp;gt;
        &amp;lt;plugin&amp;gt;
          &amp;lt;artifactId&amp;gt;maven-deploy-plugin&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;2.8.2&amp;lt;/version&amp;gt;
        &amp;lt;/plugin&amp;gt;
        &amp;lt;!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle --&amp;gt;
        &amp;lt;plugin&amp;gt;
          &amp;lt;artifactId&amp;gt;maven-site-plugin&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;3.7.1&amp;lt;/version&amp;gt;
        &amp;lt;/plugin&amp;gt;
        &amp;lt;plugin&amp;gt;
          &amp;lt;artifactId&amp;gt;maven-project-info-reports-plugin&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;3.0.0&amp;lt;/version&amp;gt;
        &amp;lt;/plugin&amp;gt;
      &amp;lt;/plugins&amp;gt;
    &amp;lt;/pluginManagement&amp;gt;
  &amp;lt;/build&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!--kg-card-end: markdown--&gt;</content:encoded></item><item><title>通過 Google Cloud 架設電商系統</title><description>之前有嘗試過在阿里雲將一個 Spring Boot - Mybatis 架構的系統，通過 CentOS 上的 Tomcat 架設一個電商系統。現在將嘗試在 Google Cloud 的 Compute Engine 上架設同一套系統，以下是對這一過程的紀錄</description><link>http://localhost:2373/online-store-on-google/</link><guid isPermaLink="false">5e8596e66946432460d37edf</guid><category>侬好，Java Dev</category><dc:creator>Davis · 景詩維 </dc:creator><pubDate>Thu, 02 Apr 2020 07:47:21 GMT</pubDate><media:content url="http://localhost:2373/content/images/2020/04/Snip20200328_1.png" medium="image"/><content:encoded>&lt;img src="http://localhost:2373/content/images/2020/04/Snip20200328_1.png" alt="通過 Google Cloud 架設電商系統"&gt;&lt;p&gt;之前有嘗試過在阿里雲將一個 Spring Boot - Mybatis 架構的系統，通過 CentOS 上的 Tomcat 架設一個電商系統。現在將嘗試在 Google Cloud 的 Compute Engine 上架設同一套系統，以下是對這一過程的紀錄：&lt;/p&gt;&lt;blockquote&gt;題外話：在 Google Cloud上選擇最低配置的系統，居然可以免費架設？另，本項目最終的 ip 地址是 34.80.79.144，下文中其他的 ip 地址是其他項目或架設於其他服務商的 ip 地址。&lt;/blockquote&gt;&lt;p&gt;在創建完一個作業系統為 CentOS 7.0 的實例後，就可以通過網頁端的 ssh 方法直接登陸操作這個伺服器了。但個人習慣採用 Mac 的 Terminal 來進行伺服器管理，因為這樣在複製和文件傳輸上比較方便。因此，接下來將介紹如何通過 ssh 命令登陸伺服器：&lt;/p&gt;&lt;h2 id="-ssh-"&gt;通過 ssh 命令登陸伺服器&lt;/h2&gt;&lt;p&gt;Google 官方在文檔中介紹的方法，是通過設定公私鑰，匹配登陸系統，但是 Google 沒有提供實例級 ssh 密鑰設定，因此直接修改伺服器系統的配置文件比較快。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;首先通過瀏覽器端登陸伺服器，並切換至 root 帳戶&lt;/li&gt;&lt;/ol&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2373/content/images/2020/04/Snip20200402_1.png" class="kg-image" alt="通過 Google Cloud 架設電商系統"&gt;&lt;/figure&gt;&lt;p&gt;之後輸入以下命令：&lt;/p&gt;&lt;pre&gt;&lt;code class="language-terminal"&gt;sudo -i&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2. 設置 root 密碼&lt;/p&gt;&lt;pre&gt;&lt;code class="language-terminal"&gt;passwd root&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3. 打開 sshd_config 配置文件&lt;/p&gt;&lt;pre&gt;&lt;code class="language-terminal"&gt;vi /etc/ssh/sshd_config&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4. 修改配置內容&lt;/p&gt;&lt;pre&gt;&lt;code class="language-terminal"&gt;PermitRootLogin yes           
PasswordAuthentication yes&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5. 重啓伺服器&lt;/p&gt;&lt;pre&gt;&lt;code class="language-terminal"&gt;reboot&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在此之後就可以通過 ssh 命令登陸伺服器的 root 用戶了。&lt;/p&gt;&lt;h2 id="-"&gt;環境配置&lt;/h2&gt;&lt;p&gt;通过 ssh 登录服务器之后，首先要创建一个新的账号：&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;useradd davis
passwd davis&lt;/code&gt;&lt;/pre&gt;&lt;h1 id="-jdk"&gt;安装 JDK&lt;/h1&gt;&lt;p&gt;然后需要检查是否有安装 jdk：&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;java -version&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如需卸载重装的话：&lt;/p&gt;&lt;pre&gt;&lt;code&gt; rpm -qa|grep openjdk -i
 rpm -e --nodeps 需要删除的软件&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="--1"&gt;开始安装&lt;/h2&gt;&lt;p&gt;1. 新建安装目录&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;mkdir /usr/java&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2. 上传安装包至目录并解压安装&lt;/p&gt;&lt;p&gt;到官网下载最新的 jdk ，然后上传至服务器，这里可以使用 ftp 工具，如 FileZilla。或直接使用以下 scp 命令, 如：&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;scp /Users/jasmine/Downloads/jdk-13.0.2_linux-x64_bin.tar.gz root@106.15.194.214:/home/admin/downloads&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解压 jdk 压缩包：&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;tar -zxvf jdk-13.0.2_linux-x64_bin.tar.gz&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而后移至 jdk 安装位置：&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;mv jdk-13.0.2/ /usr/java/&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3. 配置环境变量&lt;/p&gt;&lt;p&gt;编辑 profile 文件：&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;vim /etc/profile&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 profile 文件的末尾添加：&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;export JAVA_HOME=/usr/java/jdk-13.0.2
export CLASSPATH=.:%JAVA_HOME%/lib/dt.jar:%JAVA_HOME%/lib/tools.jar
export PATH=$PATH:$JAVA_HOME/bin&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;刷新 profile 完成安装&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;source /etc/profile&lt;/code&gt;&lt;/pre&gt;&lt;h1 id="-tomcat"&gt;部署第一台 Tomcat&lt;/h1&gt;&lt;p&gt;之后的版本中，会采用  ngnix 来部署这些项目。但现在先采用两个 Tomcat 来分别部署前端和后端：第一台服务器将被部署至  192.168.1.81，储存前端项目；第二台服务器被部署至 192.168.1.82，维护后端；另采用 192.168.1.91 端口部署  MariaDB 作为数据库，要做到内网互通。&lt;/p&gt;&lt;h2 id="-tomcat-1"&gt;安装 Tomcat&lt;/h2&gt;&lt;p&gt;下载、上传、解压 Tomcat 安装包，然后重命名并移动至安装位置。&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;## 重命名
mv apache-tomcat-9.0.30 tomcat-frontend

## 移动至安装位置
mv tomcat-frontend/ /usr/local/&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后进入Tomcat的 bin文件夹，通过startup.sh启动 Tomcat，就可以使用服务了。&lt;strong&gt;注意：要采用任何端口，都需要检查云服务器的防火墙是否允许访问这个端口&lt;/strong&gt;。如 Tomcat 的默认端口 8080，就需要在服务器中开启，并允许其访问。&lt;/p&gt;&lt;figure class="kg-card kg-image-card kg-width-wide"&gt;&lt;img src="http://localhost:2373/content/images/2020/04/Snip20200405_2.png" class="kg-image" alt="通過 Google Cloud 架設電商系統"&gt;&lt;/figure&gt;&lt;p&gt;在开启后，访问：公网ip:8080 就可以访问到 Tomcat 的欢迎页面了。&lt;/p&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2373/content/images/2020/01/Snip20200120_2.png" class="kg-image" alt="通過 Google Cloud 架設電商系統"&gt;&lt;/figure&gt;&lt;h1 id="-tomcat-2"&gt;第二台 Tomcat&lt;/h1&gt;&lt;p&gt;通过与部署第一台一样的方法，部署第二台名为 tomcat-api 的服务器至同一位置(/usr/local)。但是需要修改这台服务器的默认端口号：&lt;/p&gt;&lt;p&gt;1. 进入conf文件下，并修改 server.xml 文件。修改端口8080，至其他数字，如 8088。（可输入 /8080 查找）：&lt;/p&gt;&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Connector port="8088" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" /&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2. 找到服务器关闭端口 8005，并修改他为其他数字，如8015。&lt;/p&gt;&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Server port="8015" shutdown="SHUTDOWN"&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3. 修改 AJP Connector 的端口 8009, 为8019。&lt;/p&gt;&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Connector port="8019" protocol="AJP/1.3" redirectPort="8443" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="--2"&gt;状况处理&lt;/h2&gt;&lt;p&gt;注意：访问的时候会碰到一些问题，可以通过以下方法查看端口的状况：&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;netstat -an | grep 8080&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第一次访问端口时，会奇慢无比，可以通过以下两行代码改进：&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;yum install -y rng-tools
systemctl start rngd&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上两行代码的功效就是安装一个工具，去处理阿里云服务器中的某个速度奇慢的运算过程，具体详情请参考 &lt;a href="https://blog.csdn.net/u013361107/article/details/80826092"&gt;https://blog.csdn.net/u013361107/article/details/80826092&lt;/a&gt;。&lt;/p&gt;&lt;h1 id="-mariadb"&gt;安装 MariaDB&lt;/h1&gt;&lt;p&gt;MariaDB 提供了自动安装，以下是官網上自動安裝的方法：&lt;/p&gt;&lt;p&gt;Here is your custom MariaDB YUM repository entry for CentOS. Copy and  paste it into a file under /etc/yum.repos.d/ (we suggest naming the  file MariaDB.repo or something similar).&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;# MariaDB 10.4 CentOS repository list - created 2020-04-05 06:36 UTC
# http://downloads.mariadb.org/mariadb/repositories/
[mariadb]
name = MariaDB
baseurl = http://yum.mariadb.org/10.4/centos7-amd64
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After the file is in place, install MariaDB with:&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;sudo yum install MariaDB-server MariaDB-client&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這裏按照官方的步驟，一定會出錯。需要自行 google 查找解決方法。這裏可以選擇的方法有：&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;yum install mariadb*
chown -R mysql:mysql /var/lib/mysql/&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;可採用  yum remove mariadb 卸載，具體深度卸載可參考 &lt;a href="https://blog.csdn.net/chengyuqiang/article/details/80210416"&gt;https://blog.csdn.net/chengyuqiang/article/details/80210416&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;之後就參考下文中的【3】配置数据库 與 【4】开启远程连接 繼續操作即可。&lt;/p&gt;&lt;figure class="kg-card kg-image-card kg-card-hascaption"&gt;&lt;img src="http://localhost:2373/content/images/2020/04/Snip20200405_3.png" class="kg-image" alt="通過 Google Cloud 架設電商系統"&gt;&lt;figcaption&gt;看到 MariaDB 出現就安裝成功了&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 id="--3"&gt;手動安裝&lt;/h2&gt;&lt;p&gt;如果自動安裝有問題的話，以下是手动安装的步骤：&lt;/p&gt;&lt;p&gt;1. 下载 MariaDB 各安装包&lt;/p&gt;&lt;p&gt;进入官网，并使用其 &lt;a href="https://downloads.mariadb.org/mariadb/repositories/"&gt;Repository Configuration Tool&lt;/a&gt;. 选择好操作系统和使用版本，如 CentOS ▶ CentOS 7 (x86_64) ▶ 10.4 [Stable] ▶ (下方链接) baseurl = &lt;a href="http://yum.mariadb.org/10.4/centos7-amd64"&gt;http://yum.mariadb.org/10.4/centos7-amd64&lt;/a&gt;  ▶ rpms/ ▶ 然后下载以下安装包，并上传至服务器：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;jemalloc-3.6.0-1.el7.x86_64.rpm&lt;/li&gt;&lt;li&gt;MariaDB-10.1.21-centos7-x86_64-client.rpm&lt;/li&gt;&lt;li&gt;MariaDB-10.1.21-centos7-x86_64-compat.rpm&lt;/li&gt;&lt;li&gt;galera-25.3.19-1.rhel7.el7.centos.x86_64.rpm&lt;/li&gt;&lt;li&gt;jemalloc-devel-3.6.0-1.el7.x86_64.rpm&lt;/li&gt;&lt;li&gt;MariaDB-10.1.21-centos7-x86_64-common.rpm&lt;/li&gt;&lt;li&gt;MariaDB-10.1.21-centos7-x86_64-server.rpm&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;（版本号按需改变，如有疑问，请参考：&lt;a href="https://mariadb.com/kb/en/mariadb-installation-version-10121-via-rpms-on-centos-7/"&gt;https://mariadb.com/kb/en/mariadb-installation-version-10121-via-rpms-on-centos-7/&lt;/a&gt;）&lt;/p&gt;&lt;p&gt;2. 安装 MairaDB 所需依赖 (版本号自行调整)&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;yum install rsync nmap lsof perl-DBI nc
rpm -ivh jemalloc-3.6.0-1.el7.x86_64.rpm
rpm -ivh jemalloc-devel-3.6.0-1.el7.x86_64.rpm

# 解决冲突
rpm -qa | grep mariadb-libs
# 冲突文件：mariadb-libs-xxxxxx
rpm -ev --nodeps rpm -ev --nodeps mariadb-libs-xxxxxx
yum install boost-devel.x86_64

# 导入MariaDB的key
rpm --import http://yum.mariadb.org/RPM-GPG-KEY-MariaDB

rpm -ivh galera-4-26.4.3-1.rhel7.el7.centos.x86_64.rpm

# 安装 libaio (此步骤在安装 10.4.8 的时候需要)
wget http://mirror.centos.org/centos/6/os/x86_64/Packages/libaio-0.3.107-10.el6.x86_64.rpm

rpm -ivh libaio-0.3.107-10.el6.x86_64.rpm

yum install openssl-libs

# 安装 核心包
rpm -ivh MariaDB-common-10.4.11-1.el7.centos.x86_64.rpm MariaDB-compat-10.4.11-1.el7.centos.x86_64.rpm MariaDB-client-10.4.11-1.el7.centos.x86_64.rpm MariaDB-server-10.4.11-1.el7.centos.x86_64.rpm&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3. 配置数据库&lt;/p&gt;&lt;p&gt;安装完毕之后，需要配置数据库：&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;systemctl start mariadb

# 可用以下命令开启开机启动
systemctl enable mariadb

mysql_secure_installation&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之后根据以下表回答系统问题：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;1.输入当前密码，初次安装后是没有密码的，直接回车
2.询问是否使用`unix_socket`进行身份验证：n
3.为root设置密码：y
4.输入root的新密码：root
5.确认输入root的新密码：root
6.是否移除匿名用户，这个随意，建议删除：y
7.拒绝用户远程登录，这个建议开启：n
8.删除test库，可以保留：n
9.重新加载权限表：y&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4. 开启远程连接&lt;/p&gt;&lt;pre&gt;&lt;code&gt;mysql -u root -p 

grant all privileges on *.* to 'root'@'%' identified by 'root密码';
flush privileges;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;</content:encoded></item><item><title>分散式系統 - 學習筆記 - 壹</title><description>本章開始對分散式系統進行再一次的學習，該篇是對分散式系統相關內容的學習筆記，將會紀錄一些基本知識。</description><link>http://localhost:2373/distributed-system-01/</link><guid isPermaLink="false">5e6c8faf83d92e1021eb6f45</guid><category>分散式系統</category><category>侬好，Java Dev</category><dc:creator>Davis · 景詩維 </dc:creator><pubDate>Sat, 14 Mar 2020 08:22:28 GMT</pubDate><media:content url="http://localhost:2373/content/images/2020/03/thumb-1920-96765-1.jpg" medium="image"/><content:encoded>&lt;blockquote&gt;雖然本人碩士所在學校 - 墨爾本大學 - 在分散式系統的研究上碩果累累，且在世界上佔有一定程度的地位。但他教給我們的也只是一些理論的皮毛、一些較老的工具以及十分簡單的實踐架構。因此在本人軍事訓練放假之餘，決定對分散式系統進行一定程度的複習與擴展學習。本章將開始這一系列的學習紀錄，並收錄一些分散式系統的基礎知識。&lt;/blockquote&gt;&lt;h2 id="01-"&gt;01. 什麼是分散式系統，它的優點是什麼？&lt;/h2&gt;&lt;img src="http://localhost:2373/content/images/2020/03/thumb-1920-96765-1.jpg" alt="分散式系統 - 學習筆記 - 壹"&gt;&lt;p&gt;用我自己的話來概括就是：「&lt;strong&gt;由多硬體組成的單一軟體。&lt;/strong&gt;」至於它的優點，因為它分散的各個節點互相獨立，因此&lt;strong&gt;擁有更優的可擴展性&lt;/strong&gt;（即更易擴充與升級）&lt;strong&gt;、可用性與安全性等&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;詳細的來說：集中式系統，有別於分散式系統，雖然更易維護與開發，但是一旦系統出現問題，就會造成這個軟體的故障。比如伺服器的故障或是一個重要功能的更新，都會造成網站或應用的暫時停擺，直到新的更新或伺服器的重啓。因此，集中式系統對於單個伺服器硬體的要求也非常高。而分散式系統正好能夠擺脫這些困擾。&lt;/p&gt;&lt;h2 id="02-"&gt;02. 分散式系統的設計原則&lt;/h2&gt;&lt;p&gt;將一個應用的架構從集中式拆分為多個子系統，就是一個分散式系統的設計過程。因此，除了需要注意系統的&lt;strong&gt;可擴展性、可用性、安全性&lt;/strong&gt;以外，最重要的就是&lt;strong&gt;保障資料的一致性 &lt;/strong&gt;- 因為多系統之間的互通難免會存在時間差與bug，為了在資料儲存上不出現問題，一致性是十分重要的。&lt;/p&gt;&lt;p&gt;其他準則，在《巨型公司的網路架構：分散式系統內部解密》一書中，我節選了部分重要的內容：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;異質性&lt;/strong&gt; - 通過中間件解決各分散系統間的差異（硬體與軟體，如作業系統、開發語言等）。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;一致性 &lt;/strong&gt;- 在資料分散與複製到不同機器上時，保障各主機之間資料與時間一致。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;獨立性&lt;/strong&gt; - 保障一個主機的故障與維護不會影響整個系統的運作。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;開放性&lt;/strong&gt; - 由於分布式系統一般由多個工程師共同維護、分別開發，因此需要統一並遵循一定的標準，讓各人員能夠相互了解系統的各個區塊。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;安全性&lt;/strong&gt; - 由於多主機間增加的傳輸，各元件之間都需要做好加密與防護工作。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;可擴展性&lt;/strong&gt; - 為應變多變的業務需求，系統一定要能夠隨時進行擴充。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="03-"&gt;03. 執行緒（線程）&lt;/h2&gt;&lt;p&gt;執行緒是程式執行流的最小單元，在同一處理系統中允許多個執行緒之間平行運行。在大多數處理系統中，可以將執行緒的運作簡化為以下三種狀態：就緒、執行與阻塞。因此，執行緒具備以下最基本的流程：&lt;/p&gt;&lt;figure class="kg-card kg-image-card kg-card-hascaption"&gt;&lt;img src="http://localhost:2373/content/images/2020/03/Snip20200314_6.png" class="kg-image" alt="分散式系統 - 學習筆記 - 壹"&gt;&lt;figcaption&gt;執行緒 - 最簡化流程圖&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;接下來將複習一下，最基本的 Java 執行緒的基本知識。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;【壹】執行緒的定義與啟動&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;其中第一種方法就是直接繼承 Thread 類：&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;public class MyThread extends Thread {

    @Override
    public void run() {
        System.out.println("執行緒 - 執行");
    }

    public static void main (String[] args) {
        new MyThread().start();
    }

}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第二種，也是比較推薦的方式（因為不能繼承多個類，但可以實現多種行為），就是實現 Runnable 行為：&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;public class MyThread implements Runnable {

    @Override
    public void run() {
        System.out.println("執行緒 - 執行");
    }

    public static void main (String[] args) {
        new Thread(new MyThread()).run();
    }

}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;【貳】暫停程序與中斷&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;public class Main {
    public static void main(String[] args) throws InterruptedException {
        for (int i = 0; i &amp;lt; 10; i++) {
            Thread.sleep(1000);
            System.out.printf("Current index: %s \n", i);
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;!--kg-card-begin: markdown--&gt;&lt;p&gt;可以通過 &lt;code&gt;throw new InterruptedException&lt;/code&gt; 或 &lt;code&gt;return&lt;/code&gt; 中斷執行緒。&lt;/p&gt;
&lt;!--kg-card-end: markdown--&gt;&lt;p&gt;&lt;strong&gt;【叁】join 方法&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;join 方法能夠讓系統集中完成另一個執行緒，它也可以在後面加一個數字，即允許這個方法運行的時間，如果超過這個時間，則又會將當前的運行權交還給之前被打斷的執行緒。&lt;/p&gt;&lt;p&gt;多線程相關內容，之後再整體複習。&lt;/p&gt;&lt;h2 id="04-"&gt;04. 通訊與網路基礎&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;【壹】OSI 7層網絡結構&lt;/strong&gt;&lt;/p&gt;&lt;!--kg-card-begin: markdown--&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;層次&lt;/th&gt;
&lt;th&gt;資料格式&lt;/th&gt;
&lt;th&gt;功能與連接方式&lt;/th&gt;
&lt;th&gt;典型裝置&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;應用層 (Application)&lt;/td&gt;
&lt;td&gt;資料&lt;/td&gt;
&lt;td&gt;網絡服務與使用者應用程式間的介面&lt;/td&gt;
&lt;td&gt;終端裝置(PC、手機等)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;展現層 (Presentation)&lt;/td&gt;
&lt;td&gt;資料&lt;/td&gt;
&lt;td&gt;資料表示、安全與壓縮&lt;/td&gt;
&lt;td&gt;終端裝置(PC、手機等)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;會話層 (Session)&lt;/td&gt;
&lt;td&gt;資料&lt;/td&gt;
&lt;td&gt;會話層到傳輸層的對映；階段連接的流量控制&lt;/td&gt;
&lt;td&gt;終端裝置(PC、手機等)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;傳輸層 (Transport)&lt;/td&gt;
&lt;td&gt;資料段 (Segment)&lt;/td&gt;
&lt;td&gt;用一個定址來標誌一個特定的應用程式&lt;/td&gt;
&lt;td&gt;終端裝置(PC、手機等)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;網路層 (Network)&lt;/td&gt;
&lt;td&gt;資料封包 (Packet)&lt;/td&gt;
&lt;td&gt;以 IP 地址進行不同網絡系統間的路由&lt;/td&gt;
&lt;td&gt;路由器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;資料連結層 (Data Link)&lt;/td&gt;
&lt;td&gt;資料頁框 (Frame)&lt;/td&gt;
&lt;td&gt;在物理層的基礎上管理邏輯連接&lt;/td&gt;
&lt;td&gt;橋接器、交換機&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;物理層 (Physical)&lt;/td&gt;
&lt;td&gt;位元流 (bit)&lt;/td&gt;
&lt;td&gt;建立、維護和取消實體連接&lt;/td&gt;
&lt;td&gt;光織、電纜、中繼器等&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;!--kg-card-end: markdown--&gt;&lt;blockquote&gt;這部分將會在之後重新修改，擴充解釋。&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</content:encoded></item><item><title>Spring Boot 多環境佈署 profile</title><description>在 Spring Boot 開發時，一般都會分為開發(dev)、測試(test)與生產(prod)環境。通過一份 profile 就可以對各個環境下的配置進行統一的管理。</description><link>http://localhost:2373/spring-boot-profiles/</link><guid isPermaLink="false">5e37b17683d92e1021eb6ece</guid><category>侬好，Java Dev</category><dc:creator>Davis · 景詩維 </dc:creator><pubDate>Mon, 03 Feb 2020 05:58:43 GMT</pubDate><media:content url="http://localhost:2373/content/images/2020/02/Snip20200203_3.png" medium="image"/><content:encoded>&lt;img src="http://localhost:2373/content/images/2020/02/Snip20200203_3.png" alt="Spring Boot 多環境佈署 profile"&gt;&lt;p&gt;在 Spring Boot 開發時，一般都會分為開發(dev)、測試(test)與生產(prod)環境。通過一份 profile 就可以對各個環境下的配置進行統一的管理。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;application.yml - 主配置文件&lt;/li&gt;&lt;li&gt;application-{name}.yml - 環境配置(掛件)&lt;/li&gt;&lt;li&gt;spring.profiles.active:{name} - 激活環境&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;舉例&lt;/strong&gt;，現在在 application-dev.yml 中指定了端口號 8080，而在 application-prod.yml 中指定了端口號 80。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;- application-dev.yml -
server:
  port: 8088
  
- application-prod.yml -
server:
  port: 80&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;若在 application.yml 中指定環境：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;spring:
  profiles:
    active: dev&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那麼現在通過 localhost:8080 就可以訪問到系統。若將其改為 prod：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;spring:
  profiles:
    active: prod&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;就可以通過 localhost 直接訪問 (因為80是 Tomcat 默認端口)。&lt;/p&gt;</content:encoded></item><item><title>【过程记录】云服务器部署 - 单体架构电商网站</title><description>本篇将纪录在云服务器上部署一个单体架构电商网站的过程。（操作系统：CentOS）</description><link>http://localhost:2373/devops-online-store/</link><guid isPermaLink="false">5e2578fe956dbe0523fa53e5</guid><category>侬好，Java Dev</category><dc:creator>Davis · 景詩維 </dc:creator><pubDate>Mon, 20 Jan 2020 11:46:21 GMT</pubDate><media:content url="http://localhost:2373/content/images/2020/01/thumb-1920-430946.jpg" medium="image"/><content:encoded>&lt;blockquote&gt;在前几周，写了一个简单的单体架构电商网站。接下来记录一些云服务器部署的过程，以加快之后上架速度。&lt;/blockquote&gt;&lt;img src="http://localhost:2373/content/images/2020/01/thumb-1920-430946.jpg" alt="【过程记录】云服务器部署 - 单体架构电商网站"&gt;&lt;p&gt;通过 ssh 登录服务器之后，首先要创建一个新的账号：&lt;/p&gt;&lt;pre&gt;&lt;code class="language-CMD"&gt;useradd davis
passwd davis&lt;/code&gt;&lt;/pre&gt;&lt;h1 id="-jdk"&gt;安装 JDK&lt;/h1&gt;&lt;p&gt;然后需要检查是否有安装 jdk：&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;java -version&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如需卸载重装的话：&lt;/p&gt;&lt;pre&gt;&lt;code&gt; rpm -qa|grep openjdk -i
 rpm -e --nodeps 需要删除的软件&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="-"&gt;开始安装&lt;/h2&gt;&lt;p&gt;1. 新建安装目录&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;mkdir /usr/java&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2. 上传安装包至目录并解压安装&lt;/p&gt;&lt;p&gt;到官网下载最新的 jdk ，然后上传至服务器，这里可以使用 ftp 工具，如 FileZilla。或直接使用以下 scp 命令, 如：&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;scp /Users/jasmine/Downloads/jdk-13.0.2_linux-x64_bin.tar.gz root@106.15.194.214:/home/admin/downloads&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解压 jdk 压缩包：&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;tar -zxvf jdk-13.0.2_linux-x64_bin.tar.gz&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而后移至 jdk 安装位置：&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;mv jdk-13.0.2/ /usr/java/&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3. 配置环境变量&lt;/p&gt;&lt;p&gt;编辑 profile 文件：&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;vim /etc/profile&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 profile 文件的末尾添加：&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;export JAVA_HOME=/usr/java/jdk-13.0.2
export CLASSPATH=.:%JAVA_HOME%/lib/dt.jar:%JAVA_HOME%/lib/tools.jar
export PATH=$PATH:$JAVA_HOME/bin&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;刷新 profile 完成安装&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;source /etc/profile&lt;/code&gt;&lt;/pre&gt;&lt;h1 id="-tomcat"&gt;部署第一台 Tomcat&lt;/h1&gt;&lt;p&gt;之后的版本中，会采用 ngnix 来部署这些项目。但现在先采用两个 Tomcat 来分别部署前端和后端：第一台服务器将被部署至 192.168.1.81，储存前端项目；第二台服务器被部署至 192.168.1.82，维护后端；另采用 192.168.1.91 端口部署 MariaDB 作为数据库，要做到内网互通。&lt;/p&gt;&lt;h2 id="-tomcat-1"&gt;安装 Tomcat&lt;/h2&gt;&lt;p&gt;下载、上传、解压 Tomcat 安装包，然后重命名并移动至安装位置。&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;## 重命名
mv apache-tomcat-9.0.30 tomcat-frontend

## 移动至安装位置
mv tomcat-frontend/ /usr/local/&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后进入Tomcat的 bin文件夹，通过startup.sh启动 Tomcat，就可以使用服务了。&lt;strong&gt;注意：要采用任何端口，都需要检查云服务器的防火墙是否允许访问这个端口&lt;/strong&gt;。如 Tomcat 的默认端口 8080，就需要在服务器中开启，并允许其访问。在开启后，访问：公网ip:8080 就可以访问到 Tomcat 的欢迎页面了。&lt;/p&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2373/content/images/2020/01/Snip20200120_2.png" class="kg-image" alt="【过程记录】云服务器部署 - 单体架构电商网站"&gt;&lt;/figure&gt;&lt;h1 id="-tomcat-2"&gt;第二台 Tomcat&lt;/h1&gt;&lt;p&gt;通过与部署第一台一样的方法，部署第二台名为 tomcat-api 的服务器至同一位置(/usr/local)。但是需要修改这台服务器的默认端口号：&lt;/p&gt;&lt;p&gt;1. 进入conf文件下，并修改 server.xml 文件。修改端口8080，至其他数字，如 8088。（可输入 /8080 查找）：&lt;/p&gt;&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Connector port="8088" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" /&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2. 找到服务器关闭端口 8005，并修改他为其他数字，如8015。&lt;/p&gt;&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Server port="8015" shutdown="SHUTDOWN"&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3. 修改 AJP Connector 的端口 8009, 为8019。&lt;/p&gt;&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Connector port="8019" protocol="AJP/1.3" redirectPort="8443" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="--1"&gt;状况处理&lt;/h2&gt;&lt;p&gt;注意：访问的时候会碰到一些问题，可以通过以下方法查看端口的状况：&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;netstat -an | grep 8080&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第一次访问端口时，会奇慢无比，可以通过以下两行代码改进：&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;yum install -y rng-tools
systemctl start rngd&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上两行代码的功效就是安装一个工具，去处理阿里云服务器中的某个速度奇慢的运算过程，具体详情请参考 &lt;a href="https://blog.csdn.net/u013361107/article/details/80826092"&gt;https://blog.csdn.net/u013361107/article/details/80826092&lt;/a&gt;。&lt;/p&gt;&lt;h1 id="-mariadb"&gt;安装 MariaDB&lt;/h1&gt;&lt;p&gt;MariaDB 提供了自动安装，但听闻其国内访问速度奇慢，那么国内的云服务器肯定不能采用自动安装了。以下是手动安装的步骤：&lt;/p&gt;&lt;p&gt;1. 下载 MariaDB 各安装包&lt;/p&gt;&lt;p&gt;进入官网，并使用其 &lt;a href="https://downloads.mariadb.org/mariadb/repositories/"&gt;Repository Configuration Tool&lt;/a&gt;. 选择好操作系统和使用版本，如 CentOS ▶ CentOS 7 (x86_64) ▶ 10.4 [Stable] ▶ (下方链接) baseurl = &lt;a href="http://yum.mariadb.org/10.4/centos7-amd64"&gt;http://yum.mariadb.org/10.4/centos7-amd64&lt;/a&gt;  ▶ rpms/ ▶ 然后下载以下安装包，并上传至服务器：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;jemalloc-3.6.0-1.el7.x86_64.rpm&lt;/li&gt;&lt;li&gt;MariaDB-10.1.21-centos7-x86_64-client.rpm&lt;/li&gt;&lt;li&gt;MariaDB-10.1.21-centos7-x86_64-compat.rpm&lt;/li&gt;&lt;li&gt;galera-25.3.19-1.rhel7.el7.centos.x86_64.rpm&lt;/li&gt;&lt;li&gt;jemalloc-devel-3.6.0-1.el7.x86_64.rpm&lt;/li&gt;&lt;li&gt;MariaDB-10.1.21-centos7-x86_64-common.rpm&lt;/li&gt;&lt;li&gt;MariaDB-10.1.21-centos7-x86_64-server.rpm&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;（版本号按需改变，如有疑问，请参考：&lt;a href="https://mariadb.com/kb/en/mariadb-installation-version-10121-via-rpms-on-centos-7/"&gt;https://mariadb.com/kb/en/mariadb-installation-version-10121-via-rpms-on-centos-7/&lt;/a&gt;）&lt;/p&gt;&lt;p&gt;2. 安装 MairaDB 所需依赖 (版本号自行调整)&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;yum install rsync nmap lsof perl-DBI nc
rpm -ivh jemalloc-3.6.0-1.el7.x86_64.rpm
rpm -ivh jemalloc-devel-3.6.0-1.el7.x86_64.rpm

# 解决冲突
rpm -qa | grep mariadb-libs
# 冲突文件：mariadb-libs-xxxxxx
rpm -ev --nodeps rpm -ev --nodeps mariadb-libs-xxxxxx
yum install boost-devel.x86_64

# 导入MariaDB的key
rpm --import http://yum.mariadb.org/RPM-GPG-KEY-MariaDB

rpm -ivh galera-4-26.4.3-1.rhel7.el7.centos.x86_64.rpm

# 安装 libaio (此步骤在安装 10.4.8 的时候需要)
wget http://mirror.centos.org/centos/6/os/x86_64/Packages/libaio-0.3.107-10.el6.x86_64.rpm

rpm -ivh libaio-0.3.107-10.el6.x86_64.rpm

yum install openssl-libs

# 安装 核心包
rpm -ivh MariaDB-common-10.4.11-1.el7.centos.x86_64.rpm MariaDB-compat-10.4.11-1.el7.centos.x86_64.rpm MariaDB-client-10.4.11-1.el7.centos.x86_64.rpm MariaDB-server-10.4.11-1.el7.centos.x86_64.rpm&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3. 配置数据库&lt;/p&gt;&lt;p&gt;安装完毕之后，需要配置数据库：&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;systemctl start mariadb

# 可用以下命令开启开机启动
systemctl enable mariadb

mysql_secure_installation&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之后根据以下表回答系统问题：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;1.输入当前密码，初次安装后是没有密码的，直接回车
2.询问是否使用`unix_socket`进行身份验证：n
3.为root设置密码：y
4.输入root的新密码：root
5.确认输入root的新密码：root
6.是否移除匿名用户，这个随意，建议删除：y
7.拒绝用户远程登录，这个建议开启：n
8.删除test库，可以保留：n
9.重新加载权限表：y&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4. 开启远程连接&lt;/p&gt;&lt;pre&gt;&lt;code&gt;mysql -u root -p 

grant all privileges on *.* to 'root'@'%' identified by 'root密码';
flush privileges;&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title>[解决]ssh 时 Host key verification failed</title><description>解决 ssh 时 Host key verification failed 方法。</description><link>http://localhost:2373/host-key-verification-failed/</link><guid isPermaLink="false">5e257b67956dbe0523fa53ff</guid><category>吃我一套「解决拳」！</category><dc:creator>Davis · 景詩維 </dc:creator><pubDate>Mon, 20 Jan 2020 10:11:39 GMT</pubDate><media:content url="http://localhost:2373/content/images/2020/01/Snip20200120_1.png" medium="image"/><content:encoded>&lt;img src="http://localhost:2373/content/images/2020/01/Snip20200120_1.png" alt="[解决]ssh 时 Host key verification failed"&gt;&lt;p&gt;在云服务器重装之后，访问远程服务器就会报错，比如：&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
Someone could be eavesdropping on you right now (man-in-the-middle attack)!
It is also possible that a host key has just been changed.
The fingerprint for the ECDSA key sent by the remote host is
SHA256:LSu3+JAYOUnAYl3mmX/atZmaMQ0H2j7ejZOYiWxTs7k.
Please contact your system administrator.
Add correct host key in /Users/jasmine/.ssh/known_hosts to get rid of this message.
Offending ECDSA key in /Users/jasmine/.ssh/known_hosts:1
ECDSA host key for 106.15.194.214 has changed and you have requested strict checking.
Host key verification failed.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这时候只要进行:&lt;/p&gt;&lt;pre&gt;&lt;code class="language-cmd"&gt;ssh-keygen -R 106.15.194.214&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;移除掉之前保存的密钥就可以解决问题了。&lt;/p&gt;</content:encoded></item><item><title>Java 源码阅读（思维导图版）</title><description>本文将用思维导图的形式，对 Core Java的主要接口和类进行源码阅读后的提炼工作，通过思维导图，更方便对其复习。本文采用的 java 版本是13。</description><link>http://localhost:2373/java-source-code-reading/</link><guid isPermaLink="false">5e0335f2e46a5506d1386af9</guid><category>超大杯Americano ，加两份源码</category><dc:creator>Davis · 景詩維 </dc:creator><pubDate>Wed, 25 Dec 2019 10:24:22 GMT</pubDate><media:content url="http://localhost:2373/content/images/2019/12/thumb-1920-68300-1.jpg" medium="image"/><content:encoded>&lt;blockquote&gt;本文将用思维导图的形式，对 Core Java的主要接口和类进行源码阅读后的提炼工作，通过思维导图，更方便对其复习。本文采用的 java 版本是13。&lt;/blockquote&gt;&lt;img src="http://localhost:2373/content/images/2019/12/thumb-1920-68300-1.jpg" alt="Java 源码阅读（思维导图版）"&gt;&lt;p&gt;&lt;strong&gt;E	&lt;/strong&gt;&lt;a href="#Enumeration"&gt;Enumeration&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;I	&lt;/strong&gt;&lt;a href="#Iterable"&gt;Iterable&lt;/a&gt;  |  &lt;a href="#Iterator"&gt;Iterator&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;O	&lt;/strong&gt;&lt;a href="#Object"&gt;Object&lt;/a&gt;  |  &lt;a href="#Objects"&gt;Objects&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;!--kg-card-begin: html--&gt;&lt;h1 id="Enumeration"&gt;java.util.Enumeration&lt;/h1&gt;&lt;!--kg-card-end: html--&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2373/content/images/2019/12/Enumeration-1.png" class="kg-image" alt="Java 源码阅读（思维导图版）"&gt;&lt;/figure&gt;&lt;hr&gt;&lt;!--kg-card-begin: html--&gt;&lt;h1 id="Iterable"&gt;java.lang.Iterable&lt;/h1&gt;&lt;!--kg-card-end: html--&gt;&lt;p&gt;具备 Iterable 行为的类，就应该能够被遍历。&lt;/p&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2373/content/images/2019/12/Iterable.png" class="kg-image" alt="Java 源码阅读（思维导图版）"&gt;&lt;/figure&gt;&lt;hr&gt;&lt;!--kg-card-begin: html--&gt;&lt;h1 id="Iterator"&gt;java.util.Iterator&lt;/h1&gt;&lt;!--kg-card-end: html--&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2373/content/images/2019/12/Iterator-1.png" class="kg-image" alt="Java 源码阅读（思维导图版）"&gt;&lt;/figure&gt;&lt;hr&gt;&lt;!--kg-card-begin: html--&gt;&lt;h1 id="Object"&gt;java.lang.Object&lt;/h1&gt;&lt;!--kg-card-end: html--&gt;&lt;figure class="kg-card kg-image-card kg-width-wide"&gt;&lt;img src="http://localhost:2373/content/images/2019/12/Object.png" class="kg-image" alt="Java 源码阅读（思维导图版）"&gt;&lt;/figure&gt;&lt;hr&gt;&lt;!--kg-card-begin: html--&gt;&lt;h1 id="Objects"&gt;java.util.Objects&lt;/h1&gt;&lt;!--kg-card-end: html--&gt;&lt;figure class="kg-card kg-image-card kg-width-wide"&gt;&lt;img src="http://localhost:2373/content/images/2019/12/Objects-1.png" class="kg-image" alt="Java 源码阅读（思维导图版）"&gt;&lt;/figure&gt;</content:encoded></item><item><title>优雅又庶民地在Github Pages中上线Ghost博客系统</title><description>这篇文章，将会一步步，记录在 Github Pages 上架设 Ghost 博客系统的过程。前后只需要十分钟，就可以完成上线，优雅又免费的获得一个个人博客！</description><link>http://localhost:2373/ghost-on-github-pages/</link><guid isPermaLink="false">5df883a194c78f03ea1a66ff</guid><category>自封的首席技术专栏</category><dc:creator>Davis · 景詩維 </dc:creator><pubDate>Tue, 17 Dec 2019 14:08:00 GMT</pubDate><media:content url="http://localhost:2373/content/images/2019/12/420926.jpg" medium="image"/><content:encoded>&lt;!--kg-card-begin: markdown--&gt;&lt;h1 id&gt;序篇&lt;/h1&gt;
&lt;img src="http://localhost:2373/content/images/2019/12/420926.jpg" alt="优雅又庶民地在Github Pages中上线Ghost博客系统"&gt;&lt;p&gt;笔者对于「想要拥有个人网站」这事儿，在过去几年总会偶尔灵光一现，心血来潮地买下几个月的轻应用服务器以及域名，然后兴高采烈地架设起来，更换各种博客主题，记录一些学习心得；然而，潮起之后马上潮落，有时课程或实习太充实，无暇更新。再者，每到续费的时候，掂量掂量口袋里的钞票，穷大学生最终还是选择了多吃几餐饕餮盛宴。&lt;/p&gt;
&lt;p&gt;在这若干次的尝试中，用过阿里云、腾讯云的服务器，国内访问很快，但备案起来很麻烦；买过Amazon，Wix，GoDaddy 以及 Ghost.org 的服务，但是限制较多，需要信用卡，而且墙内速度令人抓狂。而在软件选择上，基本上都是在 &lt;a href="https://zh-cn.wordpress.com/"&gt;WordPress&lt;/a&gt; 以及 &lt;a href="https://ghost.org"&gt;Ghost Blog&lt;/a&gt; 中周旋。其实这两者对我来说，就像是 facebook 与 ins 对比的感觉。从官方提供的主题来看，后者真的优美许多。WordPress 插件多，但对我个人来说，喜欢且免费的主题太少。因为很少有开发者有那个佛心，无回报的去针对每一个 WordPress widget（小工具）进行兼容，对接和美化。再来，WordPress 着墨了很多在留言、Email、监控，这些都是小型网店才需要的配置，对于一个个人博客来说太重了；所以我更喜欢 Ghost Blog，轻便又优美，改样式也很方便，对于一个轻博客来说，功能足已。&lt;/p&gt;
&lt;p&gt;过去想要架设一个 Ghost Blog，最简单的方法就是搞一个 linux 系统的服务器，然后跟着官网的步骤，很快就能上线了。再后来，Ghost.org 官方提供了托管服务，免去了一系列繁琐的架设流程，也省去了域名的配置，但转而换来的是一个每个月至少需要 $29 刀的价格。而就在这两年，Github Pages 的问世，让免费托管成了可能。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt; 是 Github 提供的静态页面服务，可以通过 Jekyll 来进行博客管理。很多 Ghost Blog 的爱好者也关注到了这个平台，有大神在 Github 上提供了一键部署的功能。于是就有了我们今天要介绍的架设实录：如何在 Github Pages 上优雅地架设 Ghost 博客系统。&lt;/p&gt;
&lt;h1 id&gt;架设篇&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;【写在前面】本文适用于 Linux 或 macOS 系统，Windows 系统的小伙伴需自行参考各类软件的安装方式。需要用到的自动安装的 Github 项目在：&lt;a href="https://github.com/paladini/ghost-on-github-pages"&gt;paladini/ghost-on-github-pages&lt;/a&gt;，以下步骤大部分也翻译于此。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id&gt;项目思路&lt;/h2&gt;
&lt;p&gt;这个项目首先会自动安装 Ghost 博客系统，之后会将动态系统转化为静态页面，并自动部署到 Github Pages 中。值得注意的是，静态页面转化的功能其实用的是早在 2014 就不再更新的 &lt;a href="https://github.com/axitkhurana/buster"&gt;Buster.py&lt;/a&gt;。这两个项目都多多少少存在一些 bug，所以如果你成功走完「架设篇」，请一定要看完&lt;a href="#j"&gt;「修正篇」&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id&gt;步骤&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="#i1"&gt;环境配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#i2"&gt;软件安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#i3"&gt;更新博客&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="i1"&gt;环境配置&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;安装 &lt;a href="https://www.python.org/download/releases/2.7.2/"&gt;Python 2&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该软件采用的是 Python 2.x 的环境，因为之后会自动调用的 buster 不支持 3.0+。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-java"&gt;# Debian-based systems
sudo add-apt-repository ppa:deadsnakes/ppa
sudo apt-get update
sudo apt-get install python2.7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;安装 &lt;a href="https://docs.ghost.org/docs/supported-node-versions"&gt;NodeJS&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;安装可被 Ghost Blog 支持的 NodeJS 版本，目前官方支持的版本分别为 &lt;strong&gt;8.x&lt;/strong&gt;、&lt;strong&gt;10.x（官方推荐）&lt;/strong&gt; 与 &lt;strong&gt;12.x&lt;/strong&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-java"&gt;# Debian-based systems
curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -
sudo apt-get install -y nodejs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;安装 &lt;a href="https://nodejs.org/en/"&gt;npm&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-java"&gt;# Debian-based systems
sudo apt install npm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;安装 &lt;a href="https://brew.sh/index_zh-cn.html"&gt;wget&lt;/a&gt; (MacOS)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于之后自动生成静态文件的过程需要使用 wget 命令，但 MacOS 并没有自带这个功能，需要通过 &lt;a href="https://brew.sh/index_zh-cn.html"&gt;homebrew&lt;/a&gt; 进行安装。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-java"&gt;# 安装 homebrew
/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;

# 安装 wget
brew install wget
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;开启「隐藏文件可见」(MacOS)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该软件会将 Ghost 博客的文件安装到 MacOS 的 &lt;code&gt;～&lt;/code&gt; 目录中，即 &lt;code&gt;/Users/用户名&lt;/code&gt;中的一个&lt;code&gt;.ghost&lt;/code&gt;的隐藏目录。若不开启「隐藏文件可见」，将无法修改这个目录的读写权限。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-typescript"&gt;defaults write com.apple.Finder AppleShowAllFiles YES
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="i2"&gt;软件安装&lt;/h2&gt;
&lt;h3 id="ghostongithubpages"&gt;下载 ghost-on-github-pages&lt;/h3&gt;
&lt;p&gt;可以从项目地址 &lt;a href="https://github.com/paladini/ghost-on-github-pages"&gt;paladini/ghost-on-github-pages&lt;/a&gt; 中寻找，或从&lt;a href="https://github.com/paladini/ghost-on-github-pages/archive/master.zip"&gt;这里&lt;/a&gt;下载最新版本的软件，然后解压到任意位置。打开文件后，需要关注的只有一个 &lt;code&gt;install.sh&lt;/code&gt; 文件。&lt;/p&gt;
&lt;h3 id="githubrepository"&gt;创建一个新的 Github repository&lt;/h3&gt;
&lt;p&gt;首先，你需要开启 Github pages 的使用，方法可以参考&lt;a href="https://pages.github.com/"&gt;Github pages官方网站&lt;/a&gt;。如果你要直接使用 &lt;code&gt;https://用户名.github.io&lt;/code&gt; 作为这个博客的地址的话，则无需在 &lt;code&gt;用户名.github.io&lt;/code&gt; 的基础上额外创建仓库。不过，我个人推荐还是在「pages项目」的基础上，额外创建一个新的项目管理博客系统，这样更方便管理，原本的页面也不会被吞掉。&lt;/p&gt;
&lt;p&gt;在创建好 repository 之后，你需要记下来该项目 git 的 HTTPS 或 SSH 地址。这里推荐使用 HTTPS，因为这免去了系统一些密钥的配置。大致来说，新项目的 HTTPS 地址格式如下：&lt;code&gt;https://github.com/用户名/新项目名称.git&lt;/code&gt;。这个地址很重要，因为运行安装之后，需要填写。&lt;/p&gt;
&lt;h3 id="installsh"&gt;运行 install.sh 进行安装&lt;/h3&gt;
&lt;p&gt;在刚刚解压的文件夹打开 terminal，首先需要给予这个文件读写的权限（当然，也可以在 Folder 中右键修改）：&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-java"&gt;chmod +x install.sh
sudo sh ./install.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;而后，软件就会自动开始安装 Ghost 博客到 mac 的 &lt;code&gt;～&lt;/code&gt; 目录（ &lt;code&gt;/Users/用户名&lt;/code&gt;）中的一个&lt;code&gt;.ghost&lt;/code&gt;隐藏文件夹中。或者 Linux 系统下的 &lt;code&gt;/home/用户名/.ghost&lt;/code&gt;文件中。&lt;/p&gt;
&lt;p&gt;在安装的过程中，如果因为系统或网络问题失败或卡住过久。则耐心查看错误原因，并删除&lt;code&gt;.ghost&lt;/code&gt;文件夹，重新进行权限给予以及安装的过程。若成功安装 Ghost 博客之后，系统会让你回答三个问题：&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-java"&gt;1. 你的github用户名：
2. 你要安装到的repository的git所需的HTTPS或SSH地址(即上文中记录的内容)
3. 你要安装到的repository的名称
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;填写并安装成功后，你的github项目就会自动提交上传，直接访问&lt;code&gt;https://用户名.github.io/项目名&lt;/code&gt; 就可以看见成品了。（Github Pages 在上传后不会立即更新，一般需要 2～5 分钟不等，若过长时间没有更新，请检查浏览器缓存是否需要清除或检查Github绑定邮件，失败的话将会发送邮件告知原因。｜另外，这个项目太久没有维护，Github 将会提醒 6 个 warnings，选择“无视”按钮，这些警报就不会再提醒了。）&lt;/p&gt;
&lt;h2 id="i3"&gt;更新博客&lt;/h2&gt;
&lt;h3 id="ghost"&gt;Ghost 的简单操作&lt;/h3&gt;
&lt;p&gt;在项目安装完成之后，Ghost Blog 会自动在系统中运行，并且开启了端口 &lt;code&gt;localhost:2368&lt;/code&gt;。但实际上，该项目的配置文件使得它实际运行于 &lt;code&gt;localhost:2373&lt;/code&gt;。可以在&lt;code&gt;.ghost&lt;/code&gt;文件夹中，通过 &lt;code&gt;ghost ls&lt;/code&gt; 命令就可以查看实际运行的端口了。在关闭电脑之后，ghost系统也会随之关闭，需要重新打开，以下是一些 ghost 的常用命令：&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-java"&gt;// 如果因为权限问题，被deny：一可更改文件读写权限，二可在所有命令前加 sudo
// 开启
ghost start
// 重启
ghost restart
// 关闭
ghost stop
// 查看端口情况
ghost ls
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 ghost 服务开启之后，进入&lt;code&gt;localhost:2373&lt;/code&gt;就可以查看当前的动态页面，而&lt;code&gt;localhost:2373/ghost&lt;/code&gt;就可以进入服务器，进行文章等博客内容的管理了，首次登录时需要配置一些账号等基本信息，之后就可以直接使用了。&lt;/p&gt;
&lt;h3 id="deploysh"&gt;deploy.sh&lt;/h3&gt;
&lt;p&gt;在更新之后，只需要在 .ghost 文件夹中运行 deploy.sh 就可以直接部署，十分方便：&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-java"&gt;cd ~/.ghost
./deploy.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个脚本首先会将所有动态内容通过Buster转化成为静态文件，然后通过git，自动部署到Github Pages。 同样，这需要数分钟，在 Github Pages 上才看得到最新的内容。&lt;/p&gt;
&lt;h1 id="j"&gt;修正篇&lt;/h1&gt;
&lt;p&gt;该项目的持有者以及Buster都很久没有更新这两个项目了，项目多多少少存在一些问题。所以我反复检查了源码以及网上的资料，针对两个重要 bug 进行了一下的改进：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;修改默认端口号，否则链接与头像图片会出错&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打开 .ghost 文件夹下的 &lt;code&gt;config.development.json&lt;/code&gt;文件，将第一行端口改为：&lt;code&gt;&amp;quot;http://localhost:2373&amp;quot;&lt;/code&gt;，只要与 port 相同即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改&lt;code&gt;deploy.sh&lt;/code&gt;文件，增加一段脚本，不然博文图片将无法显示&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;修改&lt;code&gt;deploy.sh&lt;/code&gt;，添加以下8行代码（注意从 CORRECTING BUSTER ERRORS 那行开始）到指定位置：&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-java"&gt;...
  
update() {
	if [ -d &amp;quot;$GHOST_PATH&amp;quot; ]; then
		cd &amp;quot;$GHOST_PATH&amp;quot;

		# Generating static files
		buster generate --domain=&amp;quot;$GHOST_SERVER_URL&amp;quot;
		
		echo ' -------------- CORRECTING BUSTER ERRORS  -------------- '
		sudo chmod -R 777 *
		find . -type f -name '*.html' | xargs sed -i -e 's#.jpgg#.jpg#g'
		find . -type f -name '*.html' | xargs sed -i -e 's#.jpgpg#.jpg#g'
		find . -type f -name '*.html' | xargs sed -i -e 's#.jpgjpg#.jpg#g'
		find . -type f -name '*.html' | xargs sed -i -e 's#.pngg#.png#g'
		find . -type f -name '*.html' | xargs sed -i -e 's#.pngng#. png#g'
		find . -type f -name '*.html' | xargs sed -i -e 's#.pngpng#. png#g'

		echo ' -------------------- FIXING LINKS  -------------------- '
		echo ''
		read -p &amp;quot;Github username: &amp;quot;  gh_username
		echo &amp;quot;Leave blank if repo name is username.github.io&amp;quot;
		read -p &amp;quot;Repo name: &amp;quot; gh_repo
    
   	...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;他这出现一个致命的bug，图片的后缀莫名地变成了pngg，pngng，pngpng。这里遍历了所有代码，找到出错的地方，进行了修改。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;结语：本文主要介绍了一个自动部署 Ghost 到 Github Pages 的方法。之后还会另起篇幅，探讨如何用一个最便宜的阿里云服务器，充当该网页的图片服务器。（因为国内访问 github 的速度有时还是很慢。）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/paladini/ghost-on-github-pages"&gt;https://github.com/paladini/ghost-on-github-pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/axitkhurana/buster"&gt;https://github.com/axitkhurana/buster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/axitkhurana/buster/issues/94"&gt;https://github.com/axitkhurana/buster/issues/94&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;!--kg-card-end: markdown--&gt;</content:encoded></item><item><title>Publishing options</title><description>The Ghost editor post settings menu has everything you need to fully optimise and distribute your content effectively.</description><link>http://localhost:2373/publishing-options/</link><guid isPermaLink="false">5df7576756dcb80583dbc934</guid><category>官方文章</category><dc:creator>Ghost</dc:creator><pubDate>Mon, 16 Dec 2019 10:07:39 GMT</pubDate><media:content url="https://static.ghost.org/v3.0.0/images/publishing-options.png" medium="image"/><content:encoded>&lt;h2 id="distribute-your-content"&gt;Distribute your content&lt;/h2&gt;&lt;img src="https://static.ghost.org/v3.0.0/images/publishing-options.png" alt="Publishing options"&gt;&lt;p&gt;Access the post settings menu by clicking the settings icon in the top right hand corner of the editor and discover everything you need to get your content ready for publishing. This is where you can edit things like tags, post URL, publish date and custom meta data.&lt;/p&gt;&lt;h2 id="feature-images-url-excerpts"&gt;Feature images, URL &amp;amp; excerpts&lt;/h2&gt;&lt;p&gt;Insert your post feature image from the very top of the post settings menu. Consider resizing or optimising your image first to ensure it's an appropriate size. Below this, you can set your post URL, publish date and add a custom excerpt.&lt;/p&gt;&lt;h2 id="tags-authors"&gt;Tags &amp;amp; authors&lt;/h2&gt;&lt;p&gt;You can easily add multiple tags and authors to any post to filter and organise the relationships between your content in Ghost.&lt;/p&gt;&lt;h2 id="structured-data-seo"&gt;Structured data &amp;amp; SEO&lt;/h2&gt;&lt;p&gt;There's no need to hard code your meta data. In fact, Ghost will generate default meta data automatically using the content in your post.&lt;/p&gt;&lt;p&gt;Alternatively, you can override this by adding a custom meta title and description, as well as unique information for social media sharing cards on Facebook and Twitter.&lt;/p&gt;&lt;p&gt;It's also possible to set custom canonicals, which is useful for guest posts or curated lists of external links.&lt;/p&gt;&lt;p&gt;Ghost will automatically implement &lt;strong&gt;structured data&lt;/strong&gt; for your publication using JSON-LD to further optimise your content.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;{
    "@context": "https://schema.org",
    "@type": "Article",
    "publisher": {
        "@type": "Organization",
        "name": "Publishing options",
        "logo": "https://static.ghost.org/ghost-logo.svg"
    },
    "author": {
        "@type": "Person",
        "name": "Ghost",
        "url": "http://demo.ghost.io/author/ghost/",
        "sameAs": []
    },
    "headline": "Publishing options",
    "url": "http://demo.ghost.io/publishing-options",
    "datePublished": "2018-08-08T11:44:00.000Z",
    "dateModified": "2018-08-09T12:06:21.000Z",
    "keywords": "Getting Started",
    "description": "The Ghost editor has everything you need to fully optimise your content. This is where you can add tags and authors, feature a post, or turn a post into a page.",
    }
}
    &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can test that the structured data &lt;a href="https://schema.org/"&gt;schema&lt;/a&gt; on your site is working as it should using &lt;a href="https://search.google.com/structured-data/testing-tool" rel="noreferrer nofollow noopener"&gt;Google’s structured data tool&lt;/a&gt;. &lt;/p&gt;&lt;h2 id="code-injection"&gt;Code injection&lt;/h2&gt;&lt;p&gt;This tool allows you to inject code on a per post or page basis, or across your entire site. This means you can modify CSS, add unique tracking codes, or add other scripts to the head or foot of your publication without making edits to your theme files. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;To add code site-wide&lt;/strong&gt;, use the code injection tool in the main admin menu. This is useful for adding a Google Analytics tracking code, or to start tracking with any other analytics tool.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;To add code to a post or page&lt;/strong&gt;, use the code injection tool within the post settings menu. This is useful if you want to add art direction, scripts or styles that are only applicable to one post or page.&lt;/p&gt;&lt;h2 id="next-admin-settings"&gt;Next: Admin settings&lt;/h2&gt;&lt;p&gt;Now you understand how to create and optimise content, let's explore some &lt;a href="http://localhost:2373/admin-settings/"&gt;admin settings&lt;/a&gt; so you can invite your team and start collaborating.&lt;/p&gt;</content:encoded></item><item><title>[解决] MySQL数据库时区问题</title><description>在开发时，会碰到数据库、逻辑层与服务器时区不统一的问题。这会导致保存的时间在显示的时候出现差错，以下是在 Spring Boot 中，指定 MySQL 时区的方法。</description><link>http://localhost:2373/solve-mysql-time-zone/</link><guid isPermaLink="false">5e007dcacbc62204a4569b3c</guid><category>吃我一套「解决拳」！</category><dc:creator>Davis · 景詩維 </dc:creator><pubDate>Sun, 23 Dec 2018 08:41:00 GMT</pubDate><media:content url="http://localhost:2373/content/images/2019/12/thumb-1920-87489.jpg" medium="image"/><content:encoded>&lt;!--kg-card-begin: markdown--&gt;&lt;blockquote&gt;
&lt;img src="http://localhost:2373/content/images/2019/12/thumb-1920-87489.jpg" alt="[解决] MySQL数据库时区问题"&gt;&lt;p&gt;在开发时，会碰到数据库、逻辑层与服务器时区不统一的问题。这会导致保存的时间在显示的时候出现差错，以下是在 Spring Boot 中，指定 MySQL 时区的方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;url: jdbc:mysql://localhost:3306/ols?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;autoReconnect=true&amp;amp;serverTimezone=GMT%2B8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;添加 ：&lt;code&gt;serverTimezone=GMT%2B8&lt;/code&gt;&lt;/p&gt;
&lt;!--kg-card-end: markdown--&gt;</content:encoded></item><item><title>[解决] Table Configuration users matched more than one table (Mybatis Generator)</title><description>解决了 SpringBoot 开发时，Mybatis Generator中同名表问题。</description><link>http://localhost:2373/solve-table-configuration-users-matched-more-than-one-table-mybatis-generator/</link><guid isPermaLink="false">5e007b99cbc62204a4569b23</guid><category>吃我一套「解决拳」！</category><dc:creator>Davis · 景詩維 </dc:creator><pubDate>Sun, 23 Dec 2018 08:33:00 GMT</pubDate><media:content url="http://localhost:2373/content/images/2019/12/thumb-1920-706619.jpg" medium="image"/><content:encoded>&lt;!--kg-card-begin: markdown--&gt;&lt;img src="http://localhost:2373/content/images/2019/12/thumb-1920-706619.jpg" alt="[解决] Table Configuration users matched more than one table (Mybatis Generator)"&gt;&lt;p&gt;&lt;code&gt;#Spring Boot&lt;/code&gt; &lt;code&gt;#Mybatis&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;虽然指定了需要逆向生成的数据库，但它仍然很勤快的会去爬到其他同名的表。这里需要在配置文件中添加：&lt;code&gt;&amp;lt;property name=&amp;quot;nullCatalogMeansCurrent&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&lt;/code&gt;，在该位置：&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;        &amp;lt;jdbcConnection
                driverClass=&amp;quot;com.mysql.cj.jdbc.Driver&amp;quot;
                connectionURL=&amp;quot;jdbc:mysql://localhost:3306/ols&amp;quot;
                userId=&amp;quot;root&amp;quot;
                password=&amp;quot;Aa941211&amp;quot;&amp;gt;
            &amp;lt;property name=&amp;quot;nullCatalogMeansCurrent&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;
        &amp;lt;/jdbcConnection&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;官网参考链接：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://mybatis.org/generator/usage/mysql.html"&gt;http://mybatis.org/generator/usage/mysql.html&lt;/a&gt;&lt;/p&gt;
&lt;!--kg-card-end: markdown--&gt;</content:encoded></item></channel></rss>